Authenticate and manage users from the application

- Now we learned the steps to set up the Firebase auth JavaScript sdk, and let's look at the few requirements before getting started. So you should have added first Firebase to your JavaScript project. So that's one first requirement. Second, make sure that you have enabled Google as a sign in method in your Firebase console. For that, what you should do is go to your Firebase console then open Auth and select the sign in method from the tab, which is Google. Then save. Now, we want to implement the sign-in flow with the Firebase SDK so we can allow users to sign in and also sign out. So for that we're going to create an instance of Google Auth provider, and from there we're going to have a few methods like sign in, sign in with pop-up that's going to be one. We also need to create this object, which is get Auth. So we're going to be doing that from the firebase config remember. So let's go back to the code so we can set this up, right here. So let's go to here the handlers. We're going to create a new one, which is Auth. So from here we're going to allow, I'm going to add this to the scope and also in the firebase config, because I'm going to need to use only this one in order to export from here, one object, which will be Auth. I'm going do get Auth and then pass app as a parameter, like this. From here, I'm going to also import now from the config, firebase config. And I'm going to import this one, because I'm going to need this. So I don't need this now. And now, I want to create a new provider. This will be with this class, which is Google Auth provider. And let's create a new object that I'm going to name Firebase Auth. Inside we're going to find two methods. So first it's going to be sign in, and another one which will be Sign out, sign out (keyboard clatter) like so. Okay, that's it for now, and it's going to return a promise for the two, actually just for the one return, a new promise. Why? Because after authenticating, we want to do a few things like, so it's good to return a promise then we do some operation with user objects. So the purpose of the sign in is to return the user objects and data information. So with this sign in method, which is sign in with pop-up. And why is this pop-up? Because you're going to see, so when we try this one out it's going to open a dialogue box. So we can select the account we want to use to connect to the app. Then it's going to close. And then we're going to get the user information, which will be from this result or response if you'd like. Whichever is fine. We're going to get a response and then we're going to resolve with the response and user information. So, you're going to get access to this. So, and then you can always catch so I proceeded differently. I didn't use any try and catch. We haven't used the async awaits, this time I'm just going to console log error, in the case there's any error with this transaction, this network request. And last, also we have this other method, which is sign out. We can then use this one. It returns also. So we need to pass also the as a parameter, the information of Auth, the object Auth, it's going to return a promise. And then we can console log something like user sign out. But that's very optional. I mean it's just in the case. You want to get some feedback somewhere. I'm going to say user logged out for example. And same as well, we going to catch in the case there's any issue, we never know. I'm going to do console error. Okay, so that's it. So now to test this before, I want to make sure that I export default as well, so I can use it outside. So the thing is, for this particular handler functions we're going to use them not directly in our app as we have done for storage, because we just need storage, for example. So those methods just in one place, same for right dock. I'd like to rather use this method within the context. So we're going to use one single source of truth in order to handle the state and also handle all the actions related to authentication. And then as a result of the authentication process, we want to allow companies to subscribe to the context changes and update the UI with the user information, the user profile, for example that we should find right here. So we should get, be able to read the information of the user right here. And also we're going to need the information of the user whenever we need to upload an image and also be able to display the user information in every card. So that's a lot of places where you need to update with user information. So that needs to be done with, from one single source of truth. So we avoid the nightmare of props drilling, remember? So we're going to be dealing with that. So next we want to create a new context object. Create a new component provider, and then allow components to subscribe to the context changes with the user information.