Manage the state with the Context API: Custom hook

- [Instructor] So now we want to continue with the setup of first the authProvider, and next we want to then allow to wrap around this app component, the root component, so we can allow descending components, to access the global state and then subscribe to the context changes. So we're going to finish with the setup of this login method. So that's going to be signing, it's going to return it premise, and we're going to pass that current user. Meaning that the result of this premise, once this is fulfilled, will be passed as a value, a new value to current user. So then we're going to be able to update every descending component with the value of the user, current user, like so. And for sign out, it's going to be, actually let me check if it is also Auth. Yeah, it returns a premise, just wanted to check. Same, it's going to be then, and then here we're going to set this back to null. And just to tell the rest of the app, the other components that we no longer have any user authenticated connected. So now we want to create a new custom hook, I'm going to name this one, use AuthContext, and it's going to return the results. So whatever is stored as a global value with context, use context, it's going to be returned as the current state and also the function that are used to update the context right here. So I'm going to export, because I'm going to need to then access this from other components, for example, the nav bar. Let's go back to here. Here we have just the profile for now, but basically here in the dropdown, we're going to add a few codes, so some codes. So that's going to be dropdown, and basically this one is just going to be, I'm going to add a divider, so that's going to be another li. And like right here, I'm going to add an hr. And this one is going to be, is going to have a class name, with the class dropdown divider. And right below again, we're going to have a div, and this one is going to be flex, because we're going to have two button next to each other. I'm going to provide you the code with that, justify content center. And let's look at this piece of code that I am provided as well as part of the class resources. You're going to have this, let's copy the whole thing and go back to navbar. And you're going to add this to the top, and then make a reference to those two, log in and log out, and also log out right below. Let's try that. We have successfully added those two; login and logout is not defined in navbar, so, oh yeah let me go back. Actually, navbar, that is function that we're going to use afterwards to allow the user to login obviously, and I'm just going to add these two functions for now, just as placeholders, but we're going to complete. So once we have added through the scope, so this custom hook that we have defined already for the context, so we're going to find this inside context and then off context and use off context. So I just wanted to sign on the warning, but now instead you see that now we have two buttons, and obviously we don't want to show the two together, we want to show just one. So meaning that when the user is not connected, we're going to have the options to log in, and that's going to be then the opposite. Once the user is connected, we're going to have the options to log out. 