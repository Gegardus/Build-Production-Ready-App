Subscribe components to the context changes: User connected

- Now we want to allow the rest of the application and all other components to subscribe to the context changes. And we're going to do that with the same custom hook. For example, we want to update here and be able to display the avatar of the user connected. Okay. Also display the username. And finally allow only user who are connected to upload images. Meaning that we're going to update the security rules of the services of cloud Firestore and also cloud storage to authorize transactions only if the user is connected. So for the moment, we want to update the UI for every component, allow other components to subscribe to the context changes. Right here, so you're going to make sure that you can also add this one current user. And for example, we would like to update here and read the information of the username. And we're going to use that with useMemo. And let's make sure also that this is added to the scope. Okay, perfect. And basically it is based on the state change. So based on the change in the current user content if this is new or not, we want to return either. So that's going to be current user, if not new. We want to get to have access to display name. This is one of the property which is returned so whenever you connect with Google, you get lots of information data about the user. And if the user is not connected, we are going to read as it was before, which is profiled. So we're going to pass this instead it's going to be dynamic. It's going to be either displaying the username or just profile. Let's try that. Let's go back and connect. And now that we are connected, we can read the name, the username. Perfect. So let's do the same for the avatar now. So here, instead of just reading login, we should see the image, the avatar of the connected user. So I'm going to name this one this other memorized value avatar. And here also we're going to update this value based on the current user states. And basically here it's going to going to do a ternary operator current user. We're going to check if this is existing. And if yes, we want to return an image. I'm going to add a class name avatar. We're going to add some styling. And for the source image, it's going to be current user. And we have access to this other information, which is photo URL. Photo URL, like this. And we must also specify an alternate text always. And actually I'm going to pass we're going to pass the display name for the out text. Let's do that. For the width and height, we must always provide this information. It's going to be 34. And same for the heights like this. Okay, so let's try that. Let's just make sure also that we actually have because like here I'm going to add another CSS for avatar. And basically it's just so we can have something which is round instead of just a square shaped picture. I'm going to add 50% for the value. So we're going to have a rounded, rounded picture. So now we should be able to see, but I need to change here. So instead of login, simply log in we should update with avatar. And I think that there is, okay, let me go back, there's just an issue with the syntax that should be, oh yeah, my bad. We should also provide with the fallback. So if this is false, we should read login. That's going to be the fallback. Let me put that on the other line. Okay, perfect. So now we can see. So sometimes it may take sometimes to pick up. So let's refresh. I'm going to log in again. Okay, so let's try that by. This is something related to react, just so you know. But if you can, if you actually check you're going to see that you've got the image. Let's actually check this URL. You're going to see that the avatar is available and working properly. Here we go. So now you can see my face coming from, here we go. So you can always try and refresh with your browser. You're going to see that at some point it's going to show. And because you see that every time that you refresh, it's gone. That's because we don't allow the user to automatically log in again. So, that is something that you can also set up that we're going to do in the last part. And by allowing first the user to stay authenticated, and also to allow to add images using their account.