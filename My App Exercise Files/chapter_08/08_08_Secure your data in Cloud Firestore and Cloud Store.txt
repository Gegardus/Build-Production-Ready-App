Secure your data in Cloud Firestore and Cloud Storage

- For this new and very last demonstration I'd like to start from zero. So I have wiped out everything from the database because now we're using also the information of the user to display in the gallery. So we must also include the information of the user. So when we send the data to the database, and last what we're going to do is secure, also the database the access to the database. So let's do that. Let's go back to the form. So you see that we have defined here a new property to indicate their user information. So let's go back to the locations where we have defined this functions to create a new document and then send the data to the database. I'm going to add this info, which is user and that's going to be inputs user. Here we go. That's going to be enough. And also we must specify here in the card I'm going to add this user prop. And here instead. So we used to have this, actually this used to be heart coded. So instead we're going to use this syntax to display the user information in the card component. Okay, so let's try that. I'm going to add a new, upload a new image. I'm going to pick this one. And that's going to be California Save and Upload. And so far, remember that we've been handling everything locally with state management with the context API. So I'd rather use the same single source of truth now that we're using the cloud fire store and replace this step, which isn't really necessary now. So I'm going back in the upload form and I'm going to remove this action that I've been dispatching so far. Instead, I'm going to add to the scope, also this function which- which is redux so far. So what we did is to use this one when we start the app and actually this is read, I am mistaking. This is read, it should be read. Oh, this is from the context. So let's go back to, we have actually different ways of doing it. So it is either we can do Redux, but I should do that from the context, because we are calling this Redux function from the context. So that should be read and I'm going to call this one right here. So as soon as we are finished with the action to write a new document, we're going to then run this actions to update the global state of our app. So let me show you that again, within new example you're going to see also that as soon as I refresh the page now I can read the right information. So let's try that again with another picture with la joconde, save and upload. Here we go. It's going to take some time, but now we get information directly from the database. So the last step, if I refresh from the fire store you're going to see that now I have new documents with the right format. What I'd like is to secure the access to the database. So I'm going to do that by updating. Here are the rules. I'm going to show you how. So first, what you'd like to allow, it's going to be different. We're going to read something different. We would like to allow the actions to read to anyone who access the single page application. However, we would like to restrict the action, which is to write to the database only if the user is connected meaning that we're going to check if we have a value for us. So we're going to verify if a user is connected. So let's save that for the cloud first store. And we're going to do the same also for storage. So let's go to storage and then select rules. And we're going to replace this with these two lines the same. And when this is done you're going to see that this is successfully published. We're going to click publish and excellent. So let's try that now. I know that I am connected but I am going to disconnect and try to add a new image. I'm going to say choose file, and then go there like geometry. This one is good. And let's try. And I think that nothing happen and that's because let's check the console. Here we go. So now you're going to see that now we have fire based storage. User does not have permissions to access image geometry. So this is not authorized. This is an action which isn't authorized. In order for us to be allowed to do this action I must connect again with my accounts and then click save. And here we go. So now I've been able to upload an image because now I have secured the access to the database. Excellent. So, so far, so good. We have successfully set up a database in order to store and sync data across the application. And we can also upload and download images by using cloud storage. And now we can allow users to connect to our app in order to interact with our image gallery. Excellent. And we also have a database that is properly set up and secured. The next step is that we would like to display the images of one user. So you could display all the images but also have the option to display your own images. And the purpose of a single page application is to allow to display different views to move between different views. And for that we're going to need to set up enable client side navigation. This is what we are doing next. We're going to set up and enable client side routing with react router.