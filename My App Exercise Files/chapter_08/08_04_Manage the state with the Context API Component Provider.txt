Manage the state with the Context API: Component Provider

- [Instructor] Like we did in a previous part, we want to learn to keep the logic and the presentation separate. So we use the popular solution of the context API that provides a way to share values without having to explicitly and manually pass data down from the parents to child components. So to complete this section with user authentication the goals will be to create first a context object, create a component provider and later to create a custom hook. So let's begin with first creating a new object, context object. And that's going to be a new directory because we're going to have more than one now. So this one I'm going to move inside. So this context file, I'm going to move inside this directory. I'm going to say move and it should update like, every reference that we make to this file. We should update because now it's going to be named differently, so, we're going to call it FirestoreContext, like so. And, just to make sure that everything is fine we're going to go back to here. Yeah. So we're going to need to update, so every reference to this one. So context app is going to be FirestoreContext. And this will be from, okay, app. And that's going to be this one level, like this. And, I think that from the components in different places we actually need to access. So it's going to be, yes context, and then FirestoreContext. Same for Navbar. No, it's not required. Same here. This is okay. And there is just one place left which is in the entry points right here. So this should be context and then FirestoreContext. And, we are good to go. Back to normal, perfect. So now let's take care of creating a new context object. And this time this will be to manage, to create a single source of truth for all this handler methods. So let's go inside context and create AuthContext. So first, we import this methods from the React library, which is create context, so we can create a new context objects. Next one I'm going to do is import from... So the handler methods. So that's going to be Auth. So first I'm going to write this one. It's going to be handlers and then Auth. And this one will be, actually the name is, FirebaseAuth, like so. And, let's create also the provider. Every context object has access to a component provider with one single prop children. With one single prop, which is value. And we're going to use this prop value to pass global states down to descending components. And so, I'm going to also create a new value, which will be a memorized value. So we use, useMemo for that. And, this one is going to return an object. Empty for now. And let's replace this right away with value. Here you go. So now what I'd like to do is I'm going to import, like, add to the scope, this method that we're going to use for authentication. And this ones are sign in and sign outs. And here the purpose is to share across the application so the information in regards to the current user. So we're going to do that with, by creating local state variables. And we're going to do that with useStates. Here we go. And I'm going to name this one current user and set current user. And at first set CurrentUser, like so. Actually that capulator. And at first it's going to be null, okay? It's going to be null and afterwards we're going to update the information. So we're going to get two new methods, log in and also log outs. Okay? And we're going to use those two. Let's not forget also, to allow to pass these two functions down as prop two child components because we're going to need to use these two functions in different places, actually just one. But what's most important is to allow CurrentUser to be shared across the application because we're going to need to use that across the application. So we're going to finish in a next upcoming video. We're going to finish to set up the component provider and then allow components of the app to subscribe to the context changes.