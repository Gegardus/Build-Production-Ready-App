Use the React router hooks: useNavigate

- [Instructor] React Router offers a few useful hooks that you can use in your React applications to perform navigation tasks. First, you have useParams, that returns an object of key/value pairs of the dynamic params from the current URL that matches the route path. Then you have useNavigate, that returns a function that lets you navigate programmatically to another view. Finally, you have useLocation, that returns the current location object. And this can be very useful if you'd like to perform some side effects whenever the current location changes. For the next example, we're going to use useNavigate and useLocation. Basically what we want is to allow the user to navigate to another view to display one image individually. So let's go back to the source code. So, first, we're going to go to Card. And I'm going to add to this code this useNavigate. That's going to be from react-router-dom also. So we're going to import both useNavigate and also useLocation. We're going to need to get information of the current path. So first, we are going to add this navigate function. That is returned by useNavigate because we want to allow the user to navigate programmatically to another view. And, right here, so I'm going to make this card, the entire card, clickable. Like this. Just going to make this like that, okay. And then, we're going to add another function. So that's going to be handleOnClick. Like this is just a handler function. So we run navigate. We're going to specify a new path. For now, I'm just going to put this. And then, we can also specify in a state. So that is data that you send along the navigation process. And that's going to be the id that I'm going to send as an object. Like this. And that is something, you know, here the id, that we don't have just yet because, I'm going to show you actually, you're going to see that whenever we get the documents back from the database, what we decide to get is just this information. But let's go back quickly to where we handle, so when we read from the database. So we want to specify here as well the doc.id. So at least we can also get this information in order to identify, specifically and uniquely, like with one unique identifier, every document that is saved and stored in the database. So now, we've got this id. Like this, okay. So we need to use that. And this is what we're going to use to then create the dynamic path. And I'm going to also show you how to create a dynamic path. And this is what we're going to do next, right here. So I'm going to add a new route. So we're going back to the entry points in the index. So actually, let's copy from line 17, like this. And this new path is going to be images. And then, we're going to add a place holder. And here I'm going to replace with single. So that is one component that does not exist yet. So let's create a new one. And this component is going to be used to then display one card individually. And for your convenience, always, I am providing with the code snippets. You simply need to copy from line. So there is this single .js file. You're going to copy from line 1 to 15. Then go back right here. Let's go back here and then make sure that we import this single component. And then single. And then we replace here with single. Okay, so that's already done, perfect. So now we can use this path. Let's go back to the card. And then we can specify now the id. And that's going to be dynamic so let's replace this with backtick. And let's replace with id. So now we can navigate to this. We're going to also put this handleOnClick, this handler function right here, so we can navigate to this new component. So let's try that. We may have something missing. Okay, it looks like I've got a typo. Let's go back to the index. And here it's going to be single instead. Here we go. There we go. So now you can see that we've been able. So let's go back to homepage so we can navigate properly to the single view. We can also go back, so it's not set up yet. So we're going to need to do that next. So, so far, so what we've been doing is to create a new path, a dynamic path. And we use the id to specifically identify one element, one object and document from the collection, which is an image. And then now we want to be able to display the correct information. So based on what we use, what we get like in this pathname. So we do that next.