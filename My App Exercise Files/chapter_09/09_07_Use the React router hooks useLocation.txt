Use the React router hooks: useLocation

- [Instructor] So now we want to discover another hook, which is useLocation. And this hook allows to get the information of the current location. So we're going to use that to actually get, like, the state. So this is going to return a state object and we also need to add to the scope another state. Remember that this is from our global state, not from, but useFirestoreContext and this is going to be the state. So in order to avoid any conflict, I'm just going to rename this one to routerState, like this. We're going to need also, again, to use this useNavigate, that returns a function. And we're going to use that to allow the user to go back to where, like, here, we've got this function, we're going to add this navigate and this will allow the user to go back. Because you see that here, you can read Back. So now, what we want is to actually use this information to get whatever data is sent along during the navigation process. Basically, we're using a dynamic route to send data and we want to get this information to then filter. So I'm going to show you how because, actually, I'm going to add a debugger. I'd like to show you step-by-step first. So we're going to stop here. So let's open the console and then click on one image here. Okay, so now we can see that we've got the, like the state, as we know it. Looks like it's not displaying just yet. But anyway, already here, you can see the routerState, which is the ID that we send along. Remember that when we click on one image, we also send this data, let's go back to the Card. So we send this dynamically, which is the ID of every image, okay? And we should also get the state from, oh my bad, we've got a syntax error. So that was my mistake. But anyway, we know that this is working fine. So basically, we want to get one item object by doing state.items. So we're going to get the collection of items, okay? And we're going to use this method find, and basically, this array method will allow to return the first object that matches one predicate. So we're going to compare, so the item.id with the information sent, provided by the routerState, which is also the id. And based on that, so let's add again a debugger statement. We're going to try that again. Let's go back to, let's refresh and actually go there. Like, we're going to go back to the homepage. So let's try again and I'm going to open the console. And you'll see that when I click, here we go. So now, you can see that we've got something back that corresponds to the id and this id is the same that we have in the path, right here. So basically, this is what we want. So whenever you click on one image, you want to get the id of each image and then, we can then update. So the Card with this item and if we try again, this time, let's go back. So it worked. Perfect. So let's go back and try with another one. Now, you can display the proper information of this image. So I'd like to put this one at the center. Let me try that by actually going back to here. The way that we set up, I'm going to remove this and that's better. So last, we want to allow the user to go back to the homepage. So basically, from the single page, we're going to use again this navigate. And so here, remember that this will remember the browser history. So we just need to pass -1 as a parameter. So with this here, it's going to navigate back to the previous location where it was before navigating to this view. So let's try that. You're going to see that when I click back, I can go back to the homepage. So to the previous location, one step back, then I'm trying again with this image, la joconde. Excellent. So now, we've been able to successfully create a navigation component, so the user can navigate and move between views. So that would be great also to add one component, which is a Not Found component, in the case we land on a page that does not exist. A link that has no corresponding component. So that can help improve the user experience, so the user can go back to the homepage in the case the user is lost.