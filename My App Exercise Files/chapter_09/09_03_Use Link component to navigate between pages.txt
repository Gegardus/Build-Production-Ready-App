Use Link component to navigate between pages

- [Instructor] Next, we create a navigation component to allow user interaction, then allow navigation between views. In this example, we want to create first, a navigation component, then display the user stock images, and finally, we want to create another page to display one single card with one stock image. So first, I'm going to import right here in this nav bar, file, I'm going to import from react-router-dom, the link component. And here, the goal is to create a navigation. So I'm going to replace all the anchor tag, like so. So now we have a new navigation component. And I must also specify where I want to navigate with this link. And this will be similar to the root url. So as we have specified, defined right here, in order to display the corresponding component, which is the root component. So let's do the same to display another root. I mean another link in this navigation. So the purpose is to give the user the option to navigate to another page, where he or she can see the images uploaded by themselves. So, because here we need another link. So I'm going to make sure to wrap inside in, like this, this text. And then here, we're going to read my stocks. And for the path, like this, we want to display the corresponding component, which is this one. But this one was just for the example, so I'm going to replace with another component that I am about to create. But for the moment, I'm going to take this path. And here we go. So let's try this out. So we're going to be able to see that now we've got this. Here we go, stock images. And so in order to keep the same layout, because so far, so what we had is that we were wrapping this app component with the layout component. So let me do some quick revision here. So I'm going to go to the index.gs, and I'm going to wrap right here with layouts. Like so. And instead, in the app component, I'm going to remove this, and just replace with fragments because we need to keep one parent's elements. Here we go. So that should be fine. So now, so the changes that we allow to display, here we go, the same layout for every views in this app now. So next, I want to create another component because we don't want to keep this just as this example. Instead, inside components, I'm going to create a new component stocks. And as part of this class, I am providing with code snippets. So we can go quicker for your convenience. So you're going to copy and paste this inside this new component, right here. And there is this other component also, which is a reusable component, that we use to display a list. So let's copy that as well, and paste right here. So now you've got a new component to display the stock images of a user, and also a reusable component that we're going to use in some places, starting with, so we're going to also do some refactoring. I'm going to add, so here I'm going to import list from lists. Actually list, like this. And here we're going to replace instead of having, yeah we've got the row, so I'm going to replace all of this, and we're going to pass as a prop. It's going to be items, we're going to pass state items. And now for the stocks, you're going to have also, actually for the stock, it's going to be different because we're going to need to filter and display a list with filter results in order to keep, only display the images and stocks uploaded by the user who is connected. So let's try that. So stocks is not, so let's go back to index, and make sure that we've got everything we need in scope. And that's going to be, here we go. So now let's try, let's make a quick test. So now we can navigate back to the homepage. Excellent. And also to my stocks. So great. So the next step will be to continue with the setup of the user's stock images right here. So we want to display the results, but actually display only the results of the current user. And we also want to give the user the options to display just one single images in its own page. So there is another path to create, which will be a dynamic path.