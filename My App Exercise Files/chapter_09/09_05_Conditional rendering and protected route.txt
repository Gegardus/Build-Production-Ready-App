Conditional rendering and protected route

- Now you want to navigate to My Stock Images and be able to see your own stock images. So I'm using for this demo, the same main and primary account for this demo. So we're going to go back to the source code and do a quick change because something you should also notice, is that, right here. So remember that, every time that you were uploading a new image to the database, to the storage and then to the database, you are also specifying to LowerCase. So we must do the same. So when we want to find the right match, so to compare the user with the current user, who is connected, we must also specify to LowerCase, and that should work perfectly. So now we are in the homepage. And now let's navigate to My Stock Images. And now you can see that we can display correctly, the stock images of the current user. So let's try to make another test, from. So right now the looks like we have like an issue. And that is because, once you disconnect, because, if we go back to home, we no longer have any current users. 

So, let's just make sure that we add here an optional, with this question mark (?) operator. So in that case, if this is new, it's not going to crash, it's just going to return false. So that is ES6 syntax. 

And, let's try now to connect, to another account. I'm going to pick this one. Okay, and now I'm going to upload a new image, like this one, face and flowers, I'm going to call it. Here we go. Now I see it in the homepage. And let's navigate here. So now I can see my own image, like with my username. You see? So this is working perfectly. So one thing we want to fix as well, so I'm going to log out, because you don't want to, allow to navigate, I mean you could write a message saying, that you should login to, to display the images. But the best and simplest thing is to actually protect this route and also, hide this link. So in the case, the user is not connected. So let's go to, the navigation, right here. And we're going to add, we're going to use, also use AuthContext. And I'm going to check if there is a current user and only display this link, if there is, actually, a current user. So we're going to do some conditional rendering, and choose to display this link, this nav, if there is a user connected. So let's see, I'm not connected. So right now this is not displaying, but the route is still existing though. So to fix this, let's go back to our, entry points. And, right here we're going to add also, I'm going to share that I'm adding also to the scope, use AuthContext this hook. And we're going to take the current user, use AuthContext, current user. So that's not going to work. And I'm going to explain this to you, quickly. So basically you want to do this, which is to wrap this in current user in like this. But the thing here is that, we must respect also, you're going to see, let's try that. Something we must respect. Oh, anyway, I'm missing the parentheses, so that couldn't work. Line 13, here we go. So now you can see that we are not respecting the rule. So there are rules to respect, for the usage of the hook which is that we must call, use a hook, custom hook inside a functional component and at the top level, of the functional component. So let's fix that by creating, a component. So I'm going to call it AppRoutes. In order to, to wrap all my routes, I'm going to take all of it, like this and return, like this. And I'm going to call this hook, inside, this AppRoutes. And finally, let's just fix the indentation, okay? And then I'm going to call this, AppRoutes inside, within the layouts, like so. And that should be fixed. And at least, we can also protect the routes, which should no longer be available now. Okay? So we cannot access anything, it's not working. And also this is hidden because we don't have any user connected. But let's connect again, and I'm going to connect this time with this other, my primary account. So we can display. Here we go. So now we have all the images and when I navigate here, My Stock Images you can see that, this is visible, the link is visible and I can also navigate to my own images.