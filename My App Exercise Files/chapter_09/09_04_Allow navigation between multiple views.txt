Allow navigation between multiple views

- [Instructor] Now, I'd like to complete this part, so where we can display the StockImages. While we are here, so I'd like to also update the names, so we don't confuse this with something else. Stocks, StockImages, actually. So let me just replace in a few places, we're going to make reference to StockImages instead. I'm going to also replace the name, StockImages, I'd like to read and I'm going to replace with the name, right here. We're going to read StockImages, like this, here as well. And here as well, I'm going to refer to StockImages. And when we want to navigate also to this page. So in the navigation, we must replace, I think the way we have defined, I haven't changed it yet so I'm going to write StockImages and that should really be something dynamic. But we're going to take care of that later on because the purpose is to actually display the user, the currentUser images. And here we're going to read My Stock Images, finally. And that should be fine. Here we go, My Stock Images, excellent. So now, we want to take care of this component. So let's go here. So we're going to do, we're going to add some logic. So first let's add, because we're going to need to access the global states of our app, and that's going to be from the context. So first, FirestoreContext. We also need to access these other states. I mean these other context objects, are related to the authentications, I mean the current user information. So we're going to use for that, the custom hook, which are, so first useFirestoreContext, and this other one, which is useAuthContext. Here we go. So let's add this to the scope, useFirestoreContext, and what do we want to access here? So we want to access their current state. So we want to access the list of images coming from the database. And also for the use of context, we want to access the information of the current user connected. So that's going to be the currentUser. So with that, we're going to do some logic and we're going to do this right here. And we're going to do that by using a useMemo because we want to return a memoized value. So every time that there is a change in the list of items, images, and also the currentUser. So that's why we want to specify, here in the list of dependencies, so the list of items, but also the currentUser. So I'm going to do that right away. And what we are doing, basically, is to return a list of filtered results. So we're going to filter, I'm going to use this array method, which is filter, meaning that I'm going to create return, create and return a new array based on one predicate. So we want to, actually, only return the results that matches this predicate, which is to compare the user information with the currentUser. And actually for this, what we're going to do is, I think that we had the user. We're going to need to access the user email. And for the currentUser, I think, yeah, we're going to compare with the currentUser and user. So for that, I'm just going to add a debugger just to check what we get back from this list so we can actually get the right comparison. So let's add a debugger. And I'm going to do that on more than one line. Right here, I'm going to add a debugger. And finally we're going to return, if the currentUser, so if we have a user connected, we want to return the list of filtered results, or just nothing, just an empty array. So I'm going to make a quick test to return the items. Let's try this. Oh, looks like we may have a few things to correct. Oh yeah. And let's go back in the FirestoreContext. So looks like we just had one piece missing, which is to have like the useFirestoreContext. Let's just make sure that we've got that in the right place. Let's go back. And there is just one thing to correct, which is line 12. So where we have, like, our StockImages, so we should actually return, like this and we are good. So now, I want to open the console to see what we get back. Let's do that. My Stock Images. The item.user.email. So what we have for the user is yeah, item.user. So we need to make like, just like we did in the UploadForm, so when we create the user, so when you save to the store, we're going to do the same thing, which is username.toLowerCase, like this. And we're going to do all of that, which is the displayName. So we're going to need to make sure that we've got the same information, which is to create this username with the same format. So we're going to compare this with username and so then we can make sure that we can display the correct information. So when the user, with a user connected. So in order to test that, we're going to see that afterwards. And also we are going to make, like here, we're going to make sure that we can log in with another account and upload a few images, like so, under different accounts. So let's try that next.