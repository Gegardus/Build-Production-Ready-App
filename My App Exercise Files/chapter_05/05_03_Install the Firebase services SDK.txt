Install the Firebase services SDK

- Now we have a new project up and running. So this one is named Fire Stock. So let's go check this one out. And we also have one new application registered. And remember as well that you can add as many applications as you wish. You could decide to add, for example an iOS or an Android application. And then you'd be able to share all the same services with across all the applications of the same projects. So the next step will be to add Firebase to your project. So for that, we're going to find the configuration settings under project settings. So the first step will be to add Firebase as an SDK. We're going to run npm install Firebase. So back to our projects. We're going to run this npm install Firebase. And then the next step will be to add Firebase then initialize Firebase. So we're going to return we're going to create first an app Firebase objects so we're can use Firebase across our application. Okay? That's going to be the first step which is to initialize this. We're going to copy this to the clipboard and then go back to our project. And I'm going to create a new directory. I'm going to name it lib. Then a new file that I'm going to name fire page config js, and then paste. That's it. And remember as well, that's whatever you see on the screen. So that corresponds to the setting of my projects. You should read the settings for your projects that you have created. So that's something which is very specific to every project which is created. So that's going to allow to access to the fire store database and also the storage bucket. So next we wanted test that we have properly added Firebase to our project and also initialized. So we're going to test this with a function. So I'm going to do a few changes here. So first I'm going to return this object. And first I want to check that we actually have a Firebase Config. We're going to check that. And also if we actually have a Firebase Config API key and if this is the case, so in the case this either one is new, we want to throw an error. For example, we could read something like so. Throw an error, like so. And if this is fine, we can just console log a message that says Firebase initialized, for example. Good. And then go back to the app we want to test. Actually, that's going to be the best place to test. I'm going to add to the scope this app. Let me check. I think it's a function. Yeah, that's going to be a function, but I must also export default this one so I can use it outside. Here we go. So I'm going to then add it to the scope of this app components. And I'm going to add a useEffect just for this testing, for this test useEffect. And it's going to run. So as soon as we start the application. And I'm going to run app like so. Okay, so let's run the app. npm start. Okay, so this is running. Here it goes. So I'm going to open the console to check what message we can read in the console. Here it goes. So now we can read Firebase initialized. So that's perfect. So now we have Firebase which is installed and properly initialized. We can now use Firebase in our application. So the next step will be to actually activate enable one service, which is Firebase fire store database because we want to allow to store and synchronize data in the cloud. So we'll be fast on our way to build a serverless, full stack, single page application with Reacts and the Firebase services.