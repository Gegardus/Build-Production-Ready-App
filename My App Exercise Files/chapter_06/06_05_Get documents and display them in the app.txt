Get documents and display them in the app

- [Instructor] Now that we've been able to successfully get the snapshot from the Cloud Firestore, so we want to get them and actually display them in the gallery. So that's going to be the next step and final step of this demo. And to do that, let's go back to our source code. And we've been managing the state so far with the context. So remember that we want to use as much as possible state management which is flat with a flat structure, meaning that we're going to use one single source of truth. So we separate logic and presentation, and we also manage the data from a database with Cloud services. But for example, so the method that we have written we're going to use this one from the contexts. So I'm going to make sure that I import firestore from, that's going to be one level up. No, actually it's going to be like this. This is at the same route, and handlers and then firestore. And I'm going to get firestore and that's going to be readDocs. And basically we're going to add another action which will allow to actually set all the items. So we're going to run that as soon as we start the app, so that's going to be another action. Oh, that's going to be state. And then here it's going to be action payload. Action payload and then items, okay. And we're going to do that just one time. So this is every time that we start the app. Every time that we add a new stock image we're going to send the data to the Cloud Firestore and only update locally. Okay, so I'll show you that as well. So setItems, and from here we're going to add another function which is going to be readDocs. And this one needs to be asynchronous because when you run this function which is readDocs it's going to resolve, it's going to return a provise. So this will be await then readDocs. And in that instance, I just need to specify the name of the collection. So if we are correct, so readDocs is just going to be the name of the collection, which is going to be actually optional. So this is only in the case you'd have several, multiple collection names, and that's going to be collection name. Okay, just in case. Yeah, let's go back. And then after that we're going to dispatch this new action. This one is going to be of type. So we have named it setItems, and for the payload it's going to be items Like so, items like so. Here we go. And also, I'm going to do something else which is as we here. So I'm going back to the upload form. Okay, let's see the results after going any further actually, let's see how this works because now we want to go back to the app component. And yeah, we're using readDocs but we're not going to be using this one from the firestore now it's going to be from the context. So instead it's going to be from here. So the read function that we have now it's going to be read and we're just going to run read actually. So like the way it is set up. So it just, so now we know. I have named this one readDocs and it's not good because it's going to conflict so let me change that to read, and we must make sure that we pass this down as the value for this prov value. Remember that this is going to be the global state that we want to share across the application, so any component which is descendant of this provider component will be able to subscribe to the change. So because this is something that, you know this is not an actual, if we check with here, we're going to go to the provider and see what we have in the state. So we've got this. So you'll see that this is not something which is accessible this blob, actually, let's try another one. New image. I'm going to upload another image that we're going to be able to access locally. Here we go. We've got another one. If I refresh, it's not going to work as well. We're just going to get something that we're not going to be able to retrieve and to read, because instead we want to access images that are stored in the Cloud. So that's why I want to introduce you next to the Cloud Storage because so far we've been dealing with path and images that are stored and cached locally. In the next chapter, what about we discover another product from Firebase, which is Cloud Storage. So we can upload and also download media files from the Cloud Storage. We want to build an image gallery, so in order to create rich visual content, we're going to use Cloud Storage next.