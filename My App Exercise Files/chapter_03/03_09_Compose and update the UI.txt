Compose and update the UI

- [Instructor] So just a few steps before we can complete this part before moving on. And what I'd like, because we made sure to separate logic and presentation, I'd like to continue also with composition. For example, here's where I'd like to keep these parts in its own components. You can see that this is going to remain the same layout with the nav bar, including the form. So we could certainly remove that and place it in its own components. And it's going to be Layouts. (keyboard clicking) And I'm going to take the entire piece like this and add it here, so make sure that we add the closing tag. And we're going to add this within some fragments because it's two elements next to each other. Here I go. And which of elements is within, it's going to show as child elements, like so. And we're going to need to pass a few information. Right here, you can see. So we're going to make sure that we pass as prop, this function and also the state, onSubmits. And there is also toggle. We're going to handle this from this component. So let's go back and we want to make sure also that we add to the scope nav bar and upload form. So that's going to be-- okay, in the same root and UploadForm like so. So we're going to remove this so we no longer require this. I'm going to change two layouts. Perfect. And I'm going to wrap this, all this, with layouts. And also we're going to need to pass, of course as prop, state and also OnChange. That's going to be handle OnChange and OnSubmit. Handle OnSubmit. And I think also we need to pass toggle as a prop because we're going to handle the visibility of the form now from the layout component. So let's try this. It should be fine if we try new and then a new image like this one. Here we go. If we try another one. So this is not going away. So we're going to see, actually I'm going to fix this because remember that we were dealing with resetting all the values back to null. So we're going to need to also do that from here. So when you add a new item so actually it was count: state items length plus one. And also we're going to do inputs that we're going to set back to null. So whenever we add a null limits, and that's going to fix this. We're going to separate with comma. Perfect. Let's try that again. We shouldn't see now any remaining data information. So from the last submission, here we go. So this is no longer showing. Perfect. So next, what I'd like is also update here the way that we manage the information of the Count. So I don't want to use this as a local variable. Instead, I want to return a memoized value. Remember with useMemo? So it's going to work just like useEffect, except that here the purpose is not to apply side effects but to return a memoized value. And we're going to do that every time that there is a change in the state. We're going to return, so actually the same information here. So we can update the information, which is to display the number of images. So what I'd like, instead of just putting in the center, putting at the center so the entire content, I'm going to change, remove this utility class from Bootstrap and just place it for gallery only. That's it. That's cool. Now we have zero image. I'm going to change this by adding a new one. Here we go. Now we have one: new image number two, I'm going to say. Perfect. I think this is working perfectly. One last piece. You can see here that we are dealing in a particular way the way that we are passing data here. So instead, I'd like to actually pass the entire object. So that's going to be the last thing. And I'm going to actually pass this, pass the entire object. And then inside Card, I'd like to then get the information of the path and also the title to then update the source and then the title for the alternate text. And I think it's going to be just everything. new image number three. Let's use this one. Perfect. So now we are done with the demonstration of the state management with the Hooks API. So there is still one issue that we are facing, which is this: every time that you need to pass data down to a component, you're going to use lots of props. Let's imagine that you have an application which is bigger and more complex. Then you'd have to pass data down by going through every level of the application tree. This is a common mistake that we call props drilling which is to keep the state management in one location and at the top level of the application tree. Instead, we would like to handle the state globally, and we're going to see that next. Coming next, we're going to look at the context API to create and handle a global state as a single source of truth.