Validate and submit forms: useMemo

- [Instructor] useMemo is another React Hook that returns a memoized value and only recomputes the memoized value when there is a change in the state in the list of dependencies, right here. You can see that the syntax is very similar to useEffect. First, it creates a function and the second parameter is an array with a list of dependencies. So why we use useMemo? It allows to help with performance and avoid expensive computations on every render, meaning that the value is only recalculated if there is a change in the state. Otherwise, it's going to return a memoized value. So let's see what we want to do here. So we want to prevent the user to submit the form if there is any data missing. So for now, I can submit anything and it's still going to work. We want to prevent that. So there are a few changes to do here. So first, we're going to go to UploadForm. Right here and we're going to make sure that we pass the information of the inputs as props. Like so. The UploadForm and then we're going to read from the UploadForm, right here. And then we're going to use useMemo. So we want to make sure that we add to the scope. We're going to import from the react library, useMemo and then we're going to create a value. It's going to return a value, a memoized value. So this one, I'm going to name isDisabled. So what we want to do is to disable the submit button in the case there is any information missing in the form. So the second parameter is going to be a list of dependencies and we want to check if there is any change in the object inputs and we're going to return a value. This will be Boolean, which will be recalculated if there is any change in the inputs object. And from this object inputs, we want to get just the values. We're going to write some logic and we're going to use this array method, which is some, meaning that we're going to check if there is any value missing. By that, we want to check if there is any null value. So we check with this operator. If this is null, it's going to return true. So if any of the value is null in the objects inputs, it's going to return true. And that's going to be recalculated, between true and false, if there is any change in inputs. And with that, we're going to be able to update the state of this button with disabled. We're going to add this attribute and pass the value of this memoized value. Let's check this out. We're going to try this. For now, we only have one image. For now, this is disabled. Let's check also with the developer tools to see how this works. And actually, I'm going to go straight into UploadForm because this is where we should see inputs is disabled with the hooks, right here. So this is true for now because we have data missing. So I'm going to type, new image. This is still true because we are missing an image and we're going to add a new image and then it's going to change the state to false because now we have all the information that we need. So we can now submit the form. Perfect, so this is working perfectly fine. That would be nice to see a preview of the image we just uploaded. And also to finish this demo, like with this preview, we want to make sure that we clean the information because right now we can upload as many times as we want. So we want to make sure that we clear the data and then we can allow to upload new images. So let's go back to the source code. And we're going to look for a new file, which is preview.js. You're going to copy the source code and then go back to UploadForm and then add it on top of UploadForm, right here. Next, you want to place this one, this component, on top of the opening tag of form, with Preview. And you're going to pass as props, the objects of the inputs. And from the Preview, we're going to read from this object. And we just want to read the information of path and then do conditional rendering, meaning that we want to display the Preview only if there is a value existing for path. Here we go. So you can actually already see it. We're going to make another test. I'm going to refresh the page actually because you're going to see the difference. So when there is no path, so now we're going to upload a new image and then you're going to be able to see the preview on the left. The only thing we want to change, as well, is to clear the data as soon as we are done with uploading and adding to the gallery. So we go back to App and inside handleOnSubmit, you're going to make sure that you clear all the information in setInputs. Actually, you're going to reset everything back to null for all the properties, like so. And finally, you want to finish by collapsing, by closing the form again. So we're going to change the visibility back to false, so it's no longer being visible. So as soon as we are done. So let's do new image again, upload another image, this one and then save again. We're going to add another one, new image and then, add another one. And then, done. Perfect, so now the app is getting really bigger. It's growing fast. So we added a form. We implemented a feature to upload files and display a preview. We have several state variables to keep track of form data, conditional rendering, and the number of items. So that's a lot of things going on and we are just getting started. The app is growing really fast, along with the logic. So we need to keep things organized and tidy. I thought this could be a good time to introduce you to another Hook, useReducer. useReducer is an alternative to useState to handle complex logic. So the next exercise is focused on making the code more flexible and more maintainable with the help of the Hook, useReducer.