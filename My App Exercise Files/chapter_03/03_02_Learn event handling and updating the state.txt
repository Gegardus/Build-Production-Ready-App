Learn event handling and updating the state

- [Instructor] In order to get started with the hooks, let's take a first look at useState. So we're going to start by importing it from the React Library. And it's going to be useState, so we must make sure that this is added to the scope of this component app. And so the goal here is to transform this functional component into a stateful functional component. So we're going to go inside and we're going to use this syntax with useState. It's going to return an array. So first is a local variable to return the current state, and second is the function that we use to update the state. And as we saw previously, you can always pass an initial state. So we're going to use that, so instead of accessing photos outside of the component, because we can never access any update, we're going to refer to items, because now we can handle the logic from within the components. So we're going to check this out. So for now, this is giving me a warning because I'm not using setItems just yet. So let's check this out in the browser. We're going to open the console and go to the React DevTools. Now you see that we have access to the current states, like with the hooks. So we're going to make a quick demonstration, which is to allow to update the state now. So I'm going to add a button. So I'm going to allow some user interaction with an onClick. And the action will be to allow to add, actually update the state by changing the collection, I mean adding to the collection. We're going to use this syntax, this spread operator, to merge whichever elements we have in the items, this array with a new element. We're going to add a new image by using the same link. I'm just going to change the id here. Here you go. And I'm going to add some styling. And this is from Bootstrap, by the way. And also I need a title for this button. Here you go. Let's try this out. Now you're going to keep an eye on the right. So the current state is that we have six elements in this array. And you're going to see that as soon as I click, you now have a new picture. Now you have seven elements. And now you have a new picture in the image gallery. So let's make another demonstration. I'm going to add another control. So we're going to use the same styling, and also we're going to add, we're going to allow the interaction. So here the action will be a little bit different. We're going to allow to toggle between two values. So I'm going to create new local variables, so this one is going to be isCollapsed, and collapse for the function. And for the initial value, it's going to be a boolean. False. And I'm going to write the action, the function below. And basically we want to allow to toggle between the two values of true and false. So it's going to toggle between the two. So I'm going to pass this as the function. The action I want to happen. So when I click on the button, so let's try that. I'm just going to change here to another color. Also from Bootstrap. And I'm going to add some space with the margin. Here we go. So keep an eye again on the right. You're going to see that the value is going to change as soon as I click on the button. Excellent. So we're going to use that later for another demonstration and to allow conditional rendering. So we're going to change the appearance, the visual, so when we click on a button. So there are a few things to remember. With the hooks is that whenever you use the hooks you must always use it inside a component. I'm going to show you that if you ever try to use a hook outside other components, it's going to give you an error. So is that something that you must always keep in mind. The rules of the hooks is that you must always use them inside a component, and at the top level of the component as well. So you can never use them, for example, right here. You should always use them inside a component and at the top level.