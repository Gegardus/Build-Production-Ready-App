Create and dispatch actions

- [Instructor] Now we continue, we're going to create actions, and the goal here is to move the entire business logic outside of the app component, in order to handle the state management, outside separately. So we're going to add a new action, which is set inputs, and this is to update the form inputs, and we're going to do that with one handler function. I'm going to use here the same, that I'm putting right here at the top. And we're going to pass whichever value is provided, I mean sent with the payload, and that's going to be value. And the way we're going to handle this, so we're going to pass as well the states, because we want to also update with the current states, and we're going to return actually, it's going to be state inputs. So we're going to return an object, same as here, we are returning an object. And we want to update merge with the current state, then update with the value from the internal state of the form, like so. that should be fine. So next we are going to remove as we create actions. So we are going to update and remove, what we no longer need. So for set items, and I'm going to use the handle and change, and then dispatch, this new action. And this action is set inputs. And we're going to pass a value for the payload, which will be value equal to E, and then here we're going to do dispatch set items, because we're going to do something more simple, which is to just set items. And from the register, we're going to allow to update with state inputs. Okay, so we're going to handle everything from here, so let's remove that, and set inputs is no longer required for now. We're going to keep set counts, because we can update, with the value from the state, for the moment. And I'm going to pass this, so I don't need to update with this use effect. And I need to update as well right here, because we no longer need, okay, state inputs. And that's it for now, so we're going to update as well with collapse, that's another action we can add, in order to handle the visibility state of the form. That's going to be collapse, and we update with whichever value. We also get back with a payload, and that's going to be a Boolean value. So let's do that from here, so we don't need this anymore, and toggle going to be this one, And I'm going to also dispatch, and this will be collapsed for the action type. And for the payload it's going to be the value for a Boolean, and it's going to be state is collapsed. And this will be the opposite value of state is collapsed. Let's try that. Collapse okay, so I think that I need to update in a few places. So 54, this needs to be as well dispatched. Actually, we're going to do toggle, bool, and we're going to pass bool like so, and I'm going to do toggle from here. I don't need to repeat the same thing. So go from here, and I think I need here to also update like so, this is going to be here as well. We're going to update with this, like so, state is collapsed, and I think it's enough for now. So let's make a test. New image. We're going to pick an image from here, we have a preview. This is working and perfect. So now we can display this image. So we need to do a few things before it's completely finished. So for example here, before moving to the next stage, the next chapter. So I'd like to also put this in its own components. So I'm going to do that next, as a final step to complete this demonstration with state management, with the hooks.