Set up a Provider component to encapsulate the application logic

- [Instructor] In this video, I'd like to show you how to set up a component provider to encapsulate the application logic. Something you should know is that every context object comes with one component, the provider. Actually it comes with two components. First, the provider that allows consuming components to subscribe to the context changes. It comes with one single prop, which is value that we use to pass data down to child components. Then you have the component consumer that let's subscribe to the context changes within a function component. So I'm going to show you how to set up a component provider and let me show you one quick example first. So let's say that you'd like to share across the application with multiple components, the same UI settings to apply the same styling and appearance. So we're going to set up a component provider and we're going to use the single prop value to pass data down to any child components. And so any child components can subscribe to the context changes to the same UI settings. So for example, the dark theme or the light theme. So let's go back to our example. We're going to set up a component provider and so we're going to use the context objects so we can access the component provider and make sure that you write this one with a cap letter. And then we're going to pass some data by using this single prop, which is value. So I'm just going to pass an empty object for now and we're going to make sure that allow that any child component can then access subscribe to the context changes. So we're going to make sure that this is specified right here. So children, in order to allow child components to subscribe to the change in the state, and we're going to export default. So we can then import this provider from outside this context. And I'm going to go to the entry points so the entry point of this app and import this provider so I can wrap the app components which is the root components with the provider. So in that case we're going to allow any child components to subscribe to the context change. And same for any child components to the app component can then access subscribe to the context changes. So now what we want is to also move any state management from the app component. So what we've been doing so far is to handle the state management from one location, which is the top level of the application tree. Instead, we want to handle the state management from one location, which is the context. Like so. And because we are referring to the function radio, sir and also the initial state, we're going to make sure that we move also all of this implementation. So that's going to be from line seven all the way down to line 44; I'm going to copy and then paste it right here, like so. In the meantime, we're going to keep the same code until we can allow the app component to subscribe to the context change. So that's going to be in the next step. So what we're going to do for now is check if this is working fine, because now we're going to allow the components so any components of the applications to subscribe to the context now. We're just going to make sure that we add to the scope also of the context, the use register like so. Okay, so this is back to normal. So what we're going to do is look at the reactive tools. We're going to open the console components. And now you can see that now we have access to one provider. So this is our context object. And now we have an empty value. We have empty values for the prop, this props value. So let's go back to the code. We're going to make sure that we can access, so in the context, make sure that we can access this information which is the state and the dispatch method. Because what we want now is to allow for any component that subscribes to the context allow any components to send actions. So to the reducer. Then the reducer is in charge of returning a new state. And then we allow any child components to subscribe to the new state. Let's go back to the browser. So now we can check that. Now we have access to the dispatch method and then the current state, which corresponds to the initial states that we have defined right here. Perfect. So now we are able to manage the state globally with the context api. We have successfully created a context object and also set up a component provider. So what we want to do next is allow every components of the applications to subscribe to the context changes. We're going to see that next with one exercise and discover another hook, which is the use context.