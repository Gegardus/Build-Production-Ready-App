Solution: Allow components to subscribe to context changes

[Instructor] So let's see the solutions together. The goal is for you to subscribe, allow every component to subscribe to the context changes, instead of passing the data down from top-to-bottom, and from parents to child. So as we've been doing so far, which is to pass the data from the top level down to the upload form by going through the layout actually. So this is lots of props training. So instead, we want to allow every component to subscribe to the same context change. And we're going to start with the layout. You see that here? So we're going to allow to also access this by first adding to the scope, this use context from the React library. Same. So that's going to be used context. And we also add to the scope this context object from the context file. And this is one level up. And this one is named context. So next, we can then return the value of this context. And actually, it's going to be precisely the dispatch method, and the current state value. And what we want, you can see that here we have this toggle action. Instead of passing as a prop dysfunction, which is to allow to change the visibility of the form, we've been dealing with that from the top level, like the app component. So I'm going to copy this, actually cut it, and allow to do this from the layout component because this is where it should be handled, okay? To change the status, I mean the visibility of the form, and instead of passing this down as a prop. So I no longer need this. And we're going to do the same for this handle on change and handle on submit. I'm going to copy this and put it where it should be handled, which is inside the upload form. So let me put it right here. And I'm going to update, so everywhere where we need to handle to manage the states of the form. So that's going to be handle and submit right here, and handle and change in this place. Two places right here, handle and change. And same right here. So for the input file, handle and change, like so. And we no longer need this as a prop. So let me also refactor that. So let's go to layout. We're going to remove this, and also remove this from the app components like so. And I'm going to change also this because now, we can leave the layouts without any props drilling. And instead from the layout, we're going to be able to access, actually it's not the closing tag, like so. And from the layout, we're going to be able to access the current state from here. Okay, because we need that to actually provide with the the opposite value of the current state for the isCollapsed. And I'm going to remove this as a prop, like so. Okay, so that's one step. Let's go again to the upload form where we need to also update with is visible. I think it's going to be actually right here. We're going to change this to state isCollapsed. So let me also allow to subscribe because we didn't put that as well. So we go to the upload form. So we need to do the same. So first, we're going to add to the scope useContext, and also then add here, subscribe to the context change like so. So now, we have access to the states. So let me remove the props because instead, we're going to access, now it's going to be states is collapsed, meaning that it's going to indicate if this should be visible or not. Here as well, we can access the states, we can access the value of the inputs with the current state value. So what else we need to change? Let me go back. So yeah, we have a few things missing to update inside the upload form. So let's go back. We have the toggle function. And right here, so it's going to be just like we've been doing for the layout. We're going to allow to dispatch also this action, and pass the value of false. Meaning that every time that we are done with a form submission, we're going to collapse and close the form. And we also have the inputs, line 27. And I'm going to update here, it's going to be state inputs, now so that I think it's here, state inputs. And that's another prop, we're going to deal with that as well. And toggle also, this is in the app. Actually, I don't need to use the toggle anymore because inside the app, yeah, it's going to be handled actually outside, I mean within the components. So we just need the state, we don't need the dispatch. Let's try that. That should be fine. So we should be able to actually run the app. It's going to be the same logic, but this time, this is managed globally. Perfect. This is working just fine. Perfect. So what's left to do? We have also here we have this preview. We can also allow it to access the context the same instead of passing this as a prop. So then we can allow to access. So that's going to be just the state. I'm going to remove this prop. I don't need to read this as a prop. And I'm going to access from the state, it's going to be inputs. And from the inputs, I can then access the path, meaning that I can show. I'm going to be able to then show a preview. And same for this background image. Here we go. So this is how we can allow to manage globally the state and new image again. I'm going to try with another demo. So we are able to also show the preview, perfect. And then display the image accordingly. So we can then allow every component of the app to subscribe to the change, and then apply the side effects. Perfect. What you should keep in mind is that the solution of the context API helps address the cross-cutting concerns like the reuse of logic, modularity, and easy maintainability. It also helps to avoid code duplication, and respect the principle of separation of concerns to separate presentation and logic. And later, we're going to see also how to separate logic, presentation, and data management that we're going to manage with cloud services with Firebase. So we're doing that next, in the next chapter.