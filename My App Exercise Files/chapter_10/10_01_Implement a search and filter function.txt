Implement a search and filter function

- [Instructor] Now we add one additional feature that anyone will find useful. This is a search function, to deliver the right content to users within milliseconds. So we already have the components, the search form, right here. And we want to make this one functional. First we want to create a stateful search component, manage the form. So we're going to use the internal states of this form. And the final goal will be to filter the results from a list of data based on the user input. So we have this list of data. This collection of images that we get from the database. So what we want to do with this search component is to allow to only display the results based on the user input with this search component. So let's go back to the source code. And we look for this component, which is the nav bar. Inside you're going to find this search form. So for now, this is stateless, and we want to create a stateful search component. So we already have this search form, so we are going to add local variables. First text and then the search functions to update this state, and we're going to do that with useState. So at first it's going to be null. Okay. And we're going to add listeners. So I'm going to create first the handler function. So I'm going to update the local variable with the input from the user. So I'm going to add an onChange. One listener which will be onChange, and then pass handleOnChange. Like this. And next, we want to also handle, so whenever we submit the form, so that's going to be with handleOnSubmit. And something we must always do is to preventDefault, because the default behavior of any form, so when we submit is to refresh the page. So we want to make sure that this is not refreshing the page. And we're going to add this here, so that's going to be onSubmit and handleOnSubmit. Next we want to do something very simple, which is just to console.log, Just to test that our form, our search form component is now working as expected. So we're going to read something like searching. So whichever text we type. Okay. Let's try that. Let's go back. Oh, and this is missing here, the useState. So we're going to make sure that we add this to the scope of our component nav bar. Like this, useState. And here we go, this is back to normal. So now we're going to test our research component. So I'm going to open the console. I'm going to do Inspect and go to console right here. And we're going to test, like for example, I'm going to type "la jocone". Just "jocone" is enough. And I'm going to hit Search. And it's going to read, we're going to read "searching joconde". Perfect. So this is the first step to building a search feature. As a reminder, we use the Context API and the hooks patterns to manage the state globally as a single source of truth. So we want to use the action to dispatch the information to the function reducer. Then return a new state with the search results from the complete list of data in the library. So basically what we want is to filter the results from the complete list of data that we get from the database. And finally, we're going to allow to subscribe to the global state to make this search component functional. So we're going to update the UI to display only the results that matches the text search by the user right here. So next, what we want to do is to update on the state management side, and write the logic in order to filter the results.