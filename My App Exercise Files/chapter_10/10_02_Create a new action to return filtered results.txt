Create a new action to return filtered results

- [Instructor] Now we want to create the action in charge of returning the filtered result from the function register. For that, we move to the context API section and we find this context, FirestoreContext and we need to make a few adjustments and we start by creating a new here action. Inside the function register. I'm going to name this one FilterItems And for this one I'm going to update with whatever I get back. And I'm going to name this ObjectResults. And what we need to do as well as part of this logic is to keep track, keep hold of the original list of data, what we get back from the database that must remain untouched, intact. For that, I'm going to add a new property. I'm going to name this one placeholders and this one will always keep track of the original list of data, which is untouched. And everywhere, I'm going to update also this property with the same list of inputs of items, same for the set items right here. So that's going to be placeholders. And then I'm going to update with what we get back from the database, like this. Next we want to implement the logic in order to return a filtered list of results based on the user input, the user search input. So I'm going to create filter items right here. And as an argument, we're going to get the user input. The first thing we want to do is to check if input is not empty. If it's empty, actually. And we're going to check as well, if this is no. Basically we want to go back to the original list of items. In the case, the input is empty. In the case the search feature is inactive. So for that, we're going to do here, read items and then allow to update with the payload right here, which will be items. And I'm going to update with the state placeholders actually because we know that this list will remain the same which is untouched, like to go back to the original list. Next we're going to implement the logic. And that should be actually my mistake. It should be not here, but this line right here this is when we get the results from the database. So right here, below line here is 69. I'm going to implement the logic to then return a list of filtered results. First I'm going to use this function which is flatStateItems. I'm going to do that with placeholders, actually I'm going to do flat. And this method allows to create a new array with all the subarray elements concatenated. And after that we're going to use another array method, which is filter. And this allows to create a new array based on a predicate. And we're going to make the search on every element in this array. And that's going to be on the title because every element that we store in the database has the property title. And we're going to convert this to lowercase so we can get the right match. And I'm going to do the same for the search input that I'm going to convert into lowercase. So that's the input, you know, right here. And I'm going to convert as well to lowercase to get the perfect match. So basically I'm going to return in the case we find the search input in any element of the database any element of the stored element in the database. And that's going to be actually search input, like so, it's going to be returned in this list. And then we're going to update. So we're going to run another dispatched action. And this one is going to be, I'm going to take the type that we just created. So to get the right spelling it's going to be filterItems, and this is a string. And for the payload, we're going to return the results. So the filtered results like this. Here we go. Now we are halfway through. We have two flows, two scenarios possible. We can display the full list of records from the database or display a filtered results matching the user's input. And what's left to do is to update the component UI. So we want to subscribe the components to the context so we can dispatch this new action and filter results. Finally, update the UI with the new list when the search feature is active.