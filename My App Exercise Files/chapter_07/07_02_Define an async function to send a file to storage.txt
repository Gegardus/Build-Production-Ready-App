Define an async function to send a file to storage

- [Instructor] Just like with the Cloud Firestore, you're going to see that the steps are very easy and familiar to you. So the goal here will be to create async functions to access the firebase storage bucket. So first we're going to create-- get an instance of the storage bucket. So that's going to be the first step. Let me show you actually from the documentation. We're going to go to create a reference. So first we want to add to the scope of our file, our module, the file-based storage SDK. So we need to get this method and also this one to create a reference to the storage bucket. And we're going to use this method to upload file and send files to the cloud storage. That's going to be very easy. So let's do that. We're going to start by, I'm going to copy this, okay. And go back to the source code. We're going to also implement here the instance of the cloud storage from here. Actually, I'm going to do that right now. So that's going to be 'export'... 'storage'. And I'm going to pass app the Firebase object as a parameter. All right, I'm going to copy this. I just need the ref in the new module that I am about to create. Like here inside handlers, that's going to be the same. I'm going to define the handler function that will allow to upload to the storage. We're going to do just like with a Firestore, which is to create a new object to defined. So first it's going to be uploadFile. We're going to get one, so the data information about the file uploaded by the user, using the form, we're going to return a Promise. It's going to be an async function. We're going to wrap all of it within a try-catch same and also catch errors, in the case there's any errors with the network requests. Like this. And we're going to add to the scope also this method which is uploadBytes, okay. This one is very important. But before that I need to create a reference to the file. So I'm going to create this manually like this, with this method, which is ref, I'm going to pass, so now I'm going to add this storage object that I have defined from the config file right here from file-based config. And pass this as the first parameter. Next, this is where you're going to define the path to where the media will be uploaded. So basically the way it works is that the files in the storage bucket look like the same file system of your machine where the data is stored in the Cloud Firestore. So meaning that this is going to be organized in directories And you're going to find files within the directories. For example, I'm going to define one directory with the name 'images'. And then inside these directory 'images', I'm going to define-- I'm going to create a new file. And this one will take the name of the title of this file. So remember that we have several properties for this file object, this media, and this is defined, so inside the context, this is where we manage our estate. So for every input, we have a 'title', a 'file'. So this is the actual media that we upload, the physical media, and a path that we create. But after that we're going to create our own path to the storage bucket. Let's go back to our handler function. So to finish, we want to also now upload with 'uploadBytes'. So we pass first the fileRef as a first parameter, and also the media. So this one will be-- actually I'm going to change the name of file to something different, so it doesn't-- it's not too much. I'm going to name this 'media'. I'm going to keep this like with 'media'. So that's going to be media.file. We're going to pass this media.file, and then it's going to return a Promise. So we're going to get a snapshot, and once we resolve we want to return the information of the path. So it's going to be 'snapshot.metadata'. So that's just like the documentation, 'fullPath', and finally, I'm going to also return the name of this file which is 'file.title'. We get a title for every new file uploaded and I'm going to 'export default'. So that's it for the moment, for this new method. So the next step will be to then connect the UI component, so we can upload whatever the user submits with the form. So the data is sent first to the Cloud database Firestore. So we can do that from the UploadForm. So this is what we do here. We allow to submit, create a new data, a new document, which is then stored in the Cloud Firestore. And we're going to allow also to send the image data information along with the new document. And after that, we're going to be able to also get the URL to download this image. So that's going to be the next step. We're going to allow to upload the file storage and get the URL, so we can send documents with the image information.