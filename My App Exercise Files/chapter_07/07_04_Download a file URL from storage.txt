Download a file URL from storage

- [Instructor] The objective will be to write a new functions to again access the Firebase storage bucket in order to download a file URL, so we can set new documents with images with text and images. So let's go back to the documentation and you're going to find this section which is Download Files. And first, obviously, you're going to need to create a reference, a path reference, to get access to the image. So the file location of the image. And finally, we're going to be able to download the data with one URL We're going to do that with this method, and it's going to return a URL that we can use to then access the information, so the information on the cloud storage. So let's do that. I'm going to go back to storage and we're going to add first this to the scope, which is getDownloadURL from the SDK. And we're going to go ahead and create a new handler function. I'm going to name this one downloadFile. And this one will take one parameter, which will be the media. It's going to return in a new Promise also. It's going to be a sync. Here we go. And what we want to do here is first create a path. So that's going to be just like this at the top. And instead, we're going to change this to media.path. Media.path. And we'll add another debugger actually right here just to check what we get back. So I'll explain. So once we do the test from the form, I'll explain this step by step. And after that, the goal is to create a URL. So that's going to be fileURL, and we're going to get this with this method, which is await getDownloadURL. And we're going to pass this mediaRef as a parameter. And finally, we're going to resolve fileURL if everything is working fine. Excellent, so let's try that. So let's go back to UploadForm. We're going to add this to the scope, which is downloadFile. And here we're going to chain this functions. So first, this one returns a promise. So instead, I'm going to then run downloadFile, and it's going to return also another promise, and it's going to return a URL, okay? So that is the one which is returned. If we go back, so this is going to be this URL that we get back. But before that, you see that we are chaining the functions. And basically, so whatever we get as a result after running a uploadFile, it's going to be passed as a parameter to downloadFile. So basically, this path, we're getting this in a downloadFile, so that's why I'm using this. Let's see also with one debugger that I'm going to place right here, and we're going to make one quick test. So let's go back. So for now, we've got these two images. We're going to upload again. I'm going to do test download this time. Going to try with this one, Save and upload. My bad, I haven't opened the console, so we're going to do Inspect to make sure that we can stop the program where we need. But anyway, just so you know, I'm going to show you it worked. So for this first image, and we've been able to get the URL back. So now we've got these two new images. Let's make another test. So that's going to be test download 2. Let's pick another one or maybe this one, graffiti. We're going to do Save and upload. It's going to stop. We got the media back and we have access to this path. You see, images/test download 2. This is the actual path that we need and that we pass as a parameter right here. Let's click, we're going to run again. And now, you've got this when you return, when you fulfill the promise, you're going to get this URL. That's perfect because this is what we need in order to create a new document with images. So let's do that. I'm going back to the form. And this time, for the inputs, I'm going to add, it's going to be inputs, like so. I'm going to actually use the spread operator and then specify path, and that's going to be URL, like so, okay? And then console.log. And instead of doing this, because it also returns a promise here, I'm going to do this and allow to run this right inside right here. I'm going to remove the debugger, I no longer need this. Let's go back. And I think that's, for the right documents, let me actually go back to where I have set this up, new doc successfully inserted. So I'm just going to console.log from here. Oh, I think that's enough. I could still like, I'm going to keep this, okay. So let's try again. Let's make another quick test. This time, we're going to be able to see that we have successfully uploaded and create new documents. So let's try with another image, this one, and then Save. Okay, I kept the debugger but I'm going to remove them all afterwards. Okay, we've got our new images. Perfect. Great. Right here. And then if we go back to the database Firestore, we're going to see that this time, test download. It's not this one, it's this one. Now you've got access, you have access to this path, which is the URL. If we actually copy this one, we should access this one from the cloud storage, and this is perfect. This is working perfect. Next and last, in the next video, we can update the read methods to display text, and also the media content in our stock galleries. Because so far, we don't have access to all images. So we're going to update that so we can display all the images in the gallery. 